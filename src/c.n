;; C core

(define-naive-function-call (fn &REST args)
  `(narly-render (:context ,(FORMAT NIL "~a(~~a)" (NARLY-EVAL fn)) :separator ", ") ,@args) )

(define-narly-macro c-include (file-basename)
  `(narly-render (:context "#include \"~a.h\"~%") ,file-basename) )

(define-narly-macro typed-name (typed-name)
  (DESTRUCTURING-BIND (type name &KEY array? qualifiers) typed-name
    `(narly-render (:separator " ")
      ,@qualifiers
      ,type
      (narly-render () ,name ,(IF array? '|[]| '||)) ) ) )

(define-narly-macro body (&REST statements)
  `(narly-render (:context "{~%  ~a;~%}~%" :separator";~%  ") ,@statements) )

(define-narly-macro declare-fn (typed-name typed-arguments)
  `(narly-render (:context "~a;~%")
    (typed-name ,typed-name)
    (narly-render (:context "(~a)" :separator ", " :mapping ((typed-argument) `(typed-name ,typed-argument)))
     ,@typed-arguments ) ) )

(define-narly-macro defn (typed-name typed-arguments &REST statements)
  `(narly-render ()
    (typed-name ,typed-name)
    (narly-render (:context "(~a)" :separator ", " :mapping ((typed-argument) `(typed-name ,typed-argument)))
     ,@typed-arguments )
    (body ,@statements) ) )

(define-narly-macro define-infix-operator (symbol &OPTIONAL name)
  `(define-narly-macro ,(OR name symbol) (&REST args)
     `(narly-render (:context "(~a)" :separator ,',(FORMAT NIL ")~a(" symbol)) ,@args) ) )

(define-infix-operator +)
(define-infix-operator -)
(define-infix-operator *)
(define-infix-operator /)
(define-infix-operator %)

(define-infix-operator ==)
(define-infix-operator !=)
(define-infix-operator <)
(define-infix-operator <=)
(define-infix-operator >)
(define-infix-operator >=)

(define-infix-operator && and)
(define-infix-operator |\|\|| or)

(define-infix-operator & bit-and)
(define-infix-operator |\|| bit-or)
(define-infix-operator ^ bit-xor)
(define-infix-operator << bit-shift-left)
(define-infix-operator >> bit-shift-right)

(define-narly-macro declare-var (type name &KEY init array? length external? qualifiers)
  `(narly-render ()
    ,(IF external? '|extern | '||)
    (typed-name (,type ,name :qualifiers ,qualifiers))
    ,(COND (length `(narly-render (:context "[~a]") ,length))
           (array? '[])
           (T      '||) )
    ,(IF init
       `(narly-render (:context "=~a")
         ,(IF (ATOM init)
            init
            `(narly-render (:context "{~a}" :separator ", ")
               ,@init ) ) )
       '|| ) ) )

(define-narly-macro declare-global-var (&REST args)
  `(narly-render (:context "~a;~%") (declare-var ,@args)) )

(define-narly-macro set (&REST expressions)
  `(narly-render (:context "~a" :separator " = ") ,@expressions) )

(define-narly-macro while (test-expression &REST statements)
  `(narly-render (:separator " ")
    while
    (narly-render (:context "(~a)") ,test-expression)
    (body ,@statements) ) )

(define-narly-macro for (init-test-inc-expression &REST statements)
  `(narly-render (:separator " ")
    for
    (narly-render (:context "(~a)" :separator "; ") ,@init-test-inc-expression)
    (body ,@statements) ) )

(define-narly-macro def (name value)
  `(narly-render (:context "~a~%" :separator " ") |#define| ,name ,value) )

(define-narly-macro inc (name)
  `(narly-render (:context "++(~a)") ,name) )

(define-narly-macro inc-after (name)
  `(narly-render (:context "(~a)++") ,name) )

(define-narly-macro dec (name)
  `(narly-render (:context "--(~a)") ,name) )

(define-narly-macro dec-after (name)
  `(narly-render (:context "(~a)--") ,name) )

(define-narly-macro when (test &REST statements)
  `(narly-render (:separator " ")
    if
    (narly-render (:context "(~a)") ,test)
    (body ,@statements) ) )

(define-narly-macro cond (&REST clauses)
  `(narly-render (:separator "else " :mapping ((clause) (IF (EQ (FIRST clause) :else)
                                                          `(body ,@(REST clause))
                                                          `(when ,@clause) )))
     ,@clauses ) )

(define-narly-macro aref (name index)
  `(narly-render ()
    ,name
    (narly-render (:context "[~a]") ,index) ) )

(define-narly-macro constant (value terminal-characters)
  `(narly-render () ,value ,terminal-characters) )

(define-narly-macro enum (name &REST values)
  `(narly-render (:context ,(FORMAT NIL "enum ~a { ~~a };" name)
                  :separator ", "
                  :mapping ((value) (IF (ATOM value)
                                      value
                                      `(narly-render (:separator " = ") ,@value) )) )
    ,@values ) )

(define-narly-macro not (expression)
  `(narly-render (:context "!~a") ,expression) )

(define-narly-macro cast (expression type)
  `(narly-render (:separator " ")
    (narly-render (:context "(~a)") ,type)
    ,expression ) )

(define-narly-macro bit-complement (expression)
  `(narly-render (:context "~~~a") ,expression) )

(define-narly-macro define-assignement-operator (name symbol)
  `(define-narly-macro ,name (&REST args)
     `(narly-render (:separator ,',(FORMAT NIL " ~a= " symbol)) ,@args) ) )

(define-assignement-operator set-add +)
(define-assignement-operator set-sub -)
(define-assignement-operator set-mul *)
(define-assignement-operator set-div /)
(define-assignement-operator set-mod %)
(define-assignement-operator set-lsh <<)
(define-assignement-operator set-rsh >>)
(define-assignement-operator set-and &)
(define-assignement-operator set-or  |\||)
(define-assignement-operator set-xor ^)
