;; C core

(define-macro c-include (file-basename)
  (INTERNF "#include \"~a.h\"~%" file-basename) )

(define-macro typed-name (typed-name)
  (INTERNF "~a ~a" (NARLY-EVAL (FIRST typed-name)) (NARLY-EVAL (SECOND typed-name))) )

(define-macro body (&REST statements)
  (INTERNF "{~%  ~a;~%}~%" (STRING-JOIN (MAPCAR #'NARLY-EVAL statements) ";~%  ")) )

(define-macro defn (typed-name typed-arguments &REST statements)
  `(chunks
    (typed-name ,typed-name)
    ,(INTERNF "(~a)" (STRING-JOIN (MAPCAR #'(LAMBDA (typed-argument)
                                              (NARLY-EVAL `(typed-name ,typed-argument)) )
                                          typed-arguments )
                                  ", " ))
    (body ,@statements) ) )

(define-macro define-infix-operator (symbol)
  `(define-macro ,symbol (&REST args)
     (INTERNF "(~a)" (STRING-JOIN (MAPCAR #'NARLY-EVAL args) (FORMAT NIL "~a" ',symbol))) ) )

(define-infix-operator +)
(define-infix-operator -)
(define-infix-operator *)
(define-infix-operator /)
(define-infix-operator &&)
(define-infix-operator ||)
(define-infix-operator ==)
(define-infix-operator !=)
(define-infix-operator <)
(define-infix-operator <=)
(define-infix-operator >)
(define-infix-operator >=)

(define-macro declare-var (typed-var)
  `(typed-name ,typed-var) )

(define-macro set (&REST expressions)
  (INTERN (STRING-JOIN (MAPCAR #'NARLY-EVAL expressions) " = ")))

(define-macro while (test-expression &REST statements)
  `(chunks
    while
    |(| ,test-expression |)|
    (body ,@statements) ) )

