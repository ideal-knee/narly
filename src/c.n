;; C core

(define-narly-macro c-include (file-basename)
  `(narly-render (:context "#include \"~a.h\"~%") ,file-basename) )

(define-narly-macro typed-name (typed-name)
  `(narly-render (:separator " ") ,@typed-name) )

(define-narly-macro body (&REST statements)
  `(narly-render (:context "{~%  ~a;~%}~%" :separator";~%  ") ,@statements) )

(define-narly-macro defn (typed-name typed-arguments &REST statements)
  `(narly-render (:separator " ")
    (typed-name ,typed-name)
    (narly-render (:context "(~a)" :separator ", ")
     ,@(MAPCAR #'(LAMBDA (typed-argument) `(typed-name ,typed-argument)) typed-arguments) )
    (body ,@statements) ) )

(define-narly-macro define-infix-operator (symbol)
  `(define-narly-macro ,symbol (&REST args)
     `(narly-render (:context "(~a)" :separator ,',(FORMAT NIL "~a" symbol)) ,@args) ) )

(define-infix-operator +)
(define-infix-operator -)
(define-infix-operator *)
(define-infix-operator /)
(define-infix-operator &&)
(define-infix-operator ||)
(define-infix-operator ==)
(define-infix-operator !=)
(define-infix-operator <)
(define-infix-operator <=)
(define-infix-operator >)
(define-infix-operator >=)

(define-narly-macro declare-var (typed-var &OPTIONAL initial-value)
  (IF initial-value
    `(narly-render (:separator " = ") (typed-name ,typed-var) ,initial-value)
    `(typed-name ,typed-var) ) )

(define-narly-macro set (&REST expressions)
  `(narly-render (:context "(~a)" :separator " = ") ,@expressions) )

(define-narly-macro while (test-expression &REST statements)
  `(narly-render (:separator " ")
    while
    (narly-render (:context "(~a)") ,test-expression)
    (body ,@statements) ) )

(define-narly-macro for (init-test-inc-expression &REST statements)
  `(narly-render (:separator " ")
    for
    (narly-render (:context "(~a)" :separator "; ") ,@init-test-inc-expression)
    (body ,@statements) ) )

(define-narly-macro def (name value)
  `(narly-render (:context "~a~%" :separator " ") |#define| ,name ,value) )

(define-narly-macro inc (name)
  `(narly-render (:context "++(~a)") ,name) )

(define-narly-macro inc-after (name)
  `(narly-render (:context "(~a)++") ,name) )

(define-narly-macro dec (name)
  `(narly-render (:context "--(~a)") ,name) )

(define-narly-macro dec-after (name)
  `(narly-render (:context "(~a)--") ,name) )

(define-narly-macro chr (c)
  `(narly-render (:context "'~a'") ,c) )

